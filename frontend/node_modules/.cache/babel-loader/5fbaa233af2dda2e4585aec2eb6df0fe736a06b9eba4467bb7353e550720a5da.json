{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl\n  }) {\n    this._url = baseUrl;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getInfo(token) {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  getCards(token) {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  setUserInfo(data, token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.firstname,\n        about: data.job\n      })\n    }).then(this._checkResponse);\n  }\n  setAvatar(data, token) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  addCard(data, token) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n  putLike(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  deleteLike(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'http://localhost:3000'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","_url","_checkResponse","res","ok","json","Promise","reject","status","getInfo","token","fetch","headers","then","getCards","setUserInfo","data","method","body","JSON","stringify","name","firstname","about","job","setAvatar","avatar","addCard","title","link","putLike","cardId","deleteLike","deleteCard","api"],"sources":["/Users/juliakh/Desktop/mesto-full/react-mesto-api-full-gha/frontend/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl }) {\n    this._url = baseUrl;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInfo(token) {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._checkResponse);\n  }\n\n  getCards(token) {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._checkResponse);\n  }\n\n  setUserInfo(data, token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\" : `Bearer ${token}`\n      },\n      body: JSON.stringify({\n          name: data.firstname,\n          about: data.job,\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  setAvatar(data, token) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\" : `Bearer ${token}`\n      },\n      body: JSON.stringify({\n          avatar: data.avatar,\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  addCard(data, token) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\" : `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link,\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  putLike(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._checkResponse);\n  }\n  \n  deleteLike(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._checkResponse)\n  }\n    \n  deleteCard(cardId, token){\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._checkResponse)\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n}); \n\nexport default api "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}