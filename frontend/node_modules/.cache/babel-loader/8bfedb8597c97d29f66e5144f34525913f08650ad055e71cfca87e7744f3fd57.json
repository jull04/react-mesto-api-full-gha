{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ой! Ошибка ${res.status} : ${res.statusText}`);\n}\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res)).then(data => {\n    if (data.token) {\n      //Сохраним токен в localStorage пользователя\n      localStorage.setItem(\"token\", data.token);\n      return data;\n    }\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(checkResponse);\n};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","statusText","register","email","password","fetch","method","headers","body","JSON","stringify","then","authorize","data","token","localStorage","setItem","getContent"],"sources":["/Users/juliakh/Desktop/react-mesto-auth/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ой! Ошибка ${res.status} : ${res.statusText}`);\n}\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then(res => checkResponse(res))\n}\n\nexport const authorize  = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then(res => checkResponse(res))\n  .then((data) => {\n    if (data.token) {\n      //Сохраним токен в localStorage пользователя\n      localStorage.setItem(\"token\", data.token);\n      return data;\n    } \n  })\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then(checkResponse);\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,cAAaJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EAAC,CAAC;AACvE;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,GAAG,IAAID,aAAa,CAACC,GAAG,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAMiB,SAAS,GAAIA,CAACT,KAAK,EAAEC,QAAQ,KAAK;EAC7C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,GAAG,IAAID,aAAa,CAACC,GAAG,CAAC,CAAC,CAC/BgB,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAC;MACzC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIH,KAAK,IAAK;EACnC,OAAOT,KAAK,CAAE,GAAEZ,QAAS,WAAU,EAAE;IACnCa,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASO,KAAM;IACnC;EACF,CAAC,CAAC,CACDH,IAAI,CAACjB,aAAa,CAAC;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}